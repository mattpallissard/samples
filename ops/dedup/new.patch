diff --git a/ops/dedup/array.c b/ops/dedup/array.c
index d77d767..45e1277 100644
--- a/ops/dedup/array.c
+++ b/ops/dedup/array.c
@@ -1,43 +1,54 @@
 #include <stdbool.h>
+#include <stdlib.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <math.h>
 
-typedef uint64_t type;
-typedef uint8_t bs;
+typedef long int type;
+typedef int bs;
 enum {
 	TYPE_SIZE = sizeof(type),
-	MAX = 254,
+	BS_SIZE = 32,
+	MAX = 8,
+	HALF = MAX / 2 - 1
 };
 
 
 type get_mask(type i)
 {
-	return(pow(2, i));
+	return(pow(2, labs(i)));
 }
 
-bool member(type i, type *b)
+type member(type i, type *b)
 {
-	return (*b >> i) & 1;
+	uint8_t s = HALF;
+	if(i < 0)
+		s = 0;
+	return (*b >> labs(i)) >> s & 1;
 }
 
 void insert(type i, type *b) {
-	*b |= get_mask(i);
+	uint8_t s = HALF;
+	if(i < 0)
+		s = 0;
+	*b |= (get_mask(i) << s);
 }
 
 void display(type *t, bs i, bs j) {
 	while(i <= j)
-		printf("%lu, ", t[i++]);
+		printf("%ld, ", t[i++]);
 	printf("\n");
 }
 
 
 int main(void) {
 	type i[] = {9,4,6,32,5,9,8,2,1,7};
-	type b[MAX] =  {};
-	size_t h = sizeof(i) / sizeof(type) - 1;
-	bs j = 0, k = 0, rl = h;
-	display(i, 0, h);
+	i[8]=-1;
+	i[9]=-1;
+	type b[65] = {};
+	size_t h = sizeof(i) / sizeof(type);
+	bs j = 0, k = 0, rl = h - 1;
+	display(i, 0, h - 1);
 	do {
 		if(!member(i[j], b)) {
 			i[k++] = i[j];
